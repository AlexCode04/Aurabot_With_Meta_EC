const { OpenAI } = require("openai");
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });


async function extraerInformacionUsuario(historial, datosPrevios) {
    const historialTexto = historial
        .map((r, i) => `${i + 1}. Usuario: ${r.respuesta}\n   Aura: ${r.pregunta}`)
        .join("\n\n");

    const prompt = `
A continuaci√≥n se presenta un historial de conversaci√≥n entre un asistente de bienestar y un usuario.

Tu tarea es **extraer informaci√≥n personal del usuario** en un formato JSON con los siguientes campos:
- nombre
- edad este es un numero, por ende si no lo encuentras debes poner 0
- profesion
- circuloSocial (personas cercanas o con las que interact√∫a. Si hay varias, sep√°ralas con "|")
- ciudad
- familiares (si menciona familia: madre, padre, hermanos, etc. Sep√°ralos con "|")
- hobbies (actividades que disfruta o realiza con frecuencia. Sep√°ralos con "|")
- estadogeneral (emociones o estado general que expresa: ejemplo, ansioso, triste, motivado, etc.)

con esta estructura exacta, no agregues m√°s campos ni detalles adicionales y no uses comillas adicionales, tampoco markdown ni formato especial:

{
  "nombre": "...",
  "edad": ...,
  "profesion": "...",
  "circuloSocial": "...",
  "ciudad": "...",
  "familiares": "...",
  "hobbies": "...",
  "estadogeneral": "..."
}

Tambi√©n se te entrega un JSON con datos previos que ya fueron obtenidos:

Datos previos:
${JSON.stringify(datosPrevios, null, 2)}

Tu objetivo es:
- **Mantener los datos que ya est√°n** en el JSON previo
- **Actualizar solo los que no tienen valor** ("null" o "No encontrado"), si logras inferirlos desde el historial
- Si no se puede determinar un campo, escribe exactamente: "No encontrado"

Devuelve √∫nicamente el JSON final, sin explicaciones ni texto adicional.
No lo hagas en formato markdown ni uses comillas adicionales.
un ejemplo de respuesta correcta es:

{
  "nombre": "Carla",
  "edad": 28,
  "profesion": "Dise√±adora gr√°fica",
  "circuloSocial": "Amigos del trabajo|Compa√±eros de yoga",
  "ciudad": "Madrid",
  "familiares": "Madre|Hermana",
  "hobbies": "Pintar|Correr|Leer",
  "estadogeneral": "Ansiosa"
}

Historial de conversaci√≥n:
${historialTexto}
`;

    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            max_tokens: 400,
            temperature: 0.3,
            messages: [
                {
                    role: "system",
                    content: "Eres un extractor de informaci√≥n estructurada de conversaciones de bienestar."
                },
                {
                    role: "user",
                    content: prompt
                }
            ]
        });

        const texto = completion.choices[0].message.content.trim();

        // Intentar convertir a JSON
        try {
            const json = JSON.parse(texto);
            console.log("Informaci√≥n del usuario extra√≠da:", json);
            return json;
        } catch (parseErr) {
            console.error("‚ùå Error al parsear JSON:", parseErr);
            console.log("Respuesta recibida:\n", texto);
            return null;
        }
    } catch (err) {
        console.error("‚ùå Error extrayendo informaci√≥n del usuario:", err);
        return null;
    }
}

async function evaluarInteresRespiracion(respuestaUsuario) {
    try {
        const prompt = `
                Eres un asistente que analiza si una persona acepta o no una sugerencia de hacer una pr√°ctica de respiraci√≥n guiada.

                Analiza el siguiente mensaje del usuario y responde solo con "SI" si el usuario est√° interesado en practicar la respiraci√≥n guiada y muestra cercania o motivacion de hacerlo, o "NO" si no lo esta complemente.

                Mensaje del usuario:
                "${respuestaUsuario}"
                `;

        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            max_tokens: 5,
            temperature: 0.1,
            messages: [{ role: "user", content: prompt }],
        });

        const respuesta = completion.choices[0].message.content.trim().toUpperCase();
        return respuesta === "SI";
    } catch (err) {
        console.error("Error evaluando intenci√≥n de respiraci√≥n:", err);
        return false;
    }
}
async function evaluarConsentimientoDatos(respuestaUsuario) {
    try {
        const prompt = `
Eres un asistente que analiza si una persona acepta o no el tratamiento de sus datos personales y comunicarse a trav√©s de este medio.

Responde estrictamente con:
- 1 si el usuario acepta expresamente el tratamiento de sus datos personales y comunicarse por este medio.
- 0 si el usuario no lo acepta.
- 2 si la respuesta es ambigua.

No escribas nada m√°s.

Mensaje del usuario:
"${respuestaUsuario}"
        `;

        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            max_tokens: 1,
            temperature: 0,
            messages: [{ role: "user", content: prompt }],
        });

        return parseInt(completion.choices[0].message.content.trim(), 10);
    } catch (err) {
        console.error("Error evaluando consentimiento de datos:", err);
        return 2; // Ambiguo por defecto en caso de error
    }
}



async function detectarInteresComunidad(historial) {
    const historialTexto = historial
        .map((r, i) => `${i + 1}. Usuario: ${r.respuesta}\n   Aura: ${r.pregunta}`)
        .join("\n\n");

    const prompt = `
        Analiza esta conversaci√≥n para detectar si el usuario muestra INTER√âS GENUINO Y EXPL√çCITO en unirse a grupos o comunidades de bienestar/mindfulness/meditaci√≥n.

        CRITERIOS ESTRICTOS para responder "true":
        El usuario debe expresar CLARAMENTE inter√©s en:
        - Unirse a un grupo/comunidad/c√≠rculo de apoyo
        - Participar en actividades grupales de bienestar
        - Conocer otras personas con intereses similares
        - Formar parte de una comunidad de pr√°ctica
        - Recibir apoyo grupal o comunitario

        EJEMPLOS que S√ç califican como "true":
        - "Me gustar√≠a unirme a esa comunidad"
        - "S√≠, quiero participar en el grupo"
        - "Me interesa conocer m√°s sobre esa comunidad"
        - "¬øC√≥mo puedo formar parte?"
        - "Suena interesante, me apunto"
        - "Quiero unirme al grupo de meditaci√≥n"

        EJEMPLOS que NO califican (responde "false"):
        - "Ok", "Vale", "Entiendo", "Gracias"
        - "Me gusta la idea" (sin mencionar participaci√≥n)
        - "Est√° bien" o cualquier respuesta gen√©rica
        - Solo hablar de querer sentirse mejor sin mencionar grupos
        - Preguntas generales sobre meditaci√≥n sin inter√©s grupal
        - Respuestas de cortes√≠a o confirmaci√≥n simple

        IMPORTANTE: Si el usuario solo da respuestas cortas, gen√©ricas o de cortes√≠a (como "Ok", "Si", "Gracias"), esto NO indica inter√©s genuino en comunidades.

        Historial de conversaci√≥n:
        ${historialTexto}

        Responde exactamente "true" o "false". No agregues explicaciones ni comillas.
        `;

    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            max_tokens: 10,
            temperature: 0,
            messages: [
                {
                    role: "system",
                    content: "Eres un detector ultra-espec√≠fico de inter√©s genuino en comunidades. Solo respondes 'true' cuando hay inter√©s expl√≠cito y claro en participar en grupos o comunidades."
                },
                {
                    role: "user",
                    content: prompt
                }
            ]
        });

        const respuesta = completion.choices[0].message.content.trim().toLowerCase();
        return respuesta === "true";
    } catch (err) {
        console.error("‚ùå Error detectando inter√©s en comunidad:", err);
        return false;
    }
}


async function recomendarGrupo(historial, gruposDisponibles) {
    const historialTexto = historial
        .map((r, i) => `${i + 1}. Usuario: ${r.respuesta}\n Aura: ${r.pregunta}`)
        .join("\n\n");

    const prompt = `Eres Aura Calmness, un psic√≥logo especializado en mindfulness. Tu estilo es profesional, humano, cercano y emp√°tico. üçÉ‚ú® 

        Tu tarea es analizar el historial de conversaci√≥n del usuario y recomendar siempre UN SOLO grupo de la lista proporcionada.  
        Nunca digas que no tienes grupos para recomendar.  
        Si no hay coincidencia exacta con lo que necesita el usuario, elige el grupo m√°s cercano en tema o enfoque.  
        Si hay varias opciones cercanas, elige la que creas que puede generar mayor impacto positivo en su situaci√≥n emocional.

        IMPORTANTE:
        - Evita repetir mensajes ya enviados. Cada recomendaci√≥n debe ser nueva y √∫nica.
        - Tu an√°lisis debe priorizar coincidencias sem√°nticas, no solo palabras exactas.
        - Considera sin√≥nimos, temas relacionados y beneficios indirectos.
        - Si el grupo no es exactamente para el problema del usuario, adapta el mensaje para explicar c√≥mo A√öN AS√ç puede ayudarle.

        PROCESO DE AN√ÅLISIS:
        1. Lee cuidadosamente el historial del usuario e identifica:
        - Sus emociones actuales (tristeza, ansiedad, estr√©s, etc.)
        - Sus preocupaciones principales
        - Los temas que menciona
        - Su estado emocional general

        2. Analiza cada grupo disponible:
        - ¬øQu√© emociones o temas aborda?
        - ¬øQu√© beneficios ofrece?
        - ¬øQu√© t√©cnicas o enfoques usa?
        - ¬øC√≥mo puede ayudar, directa o indirectamente, al usuario?

        3. Haz matching din√°mico:
        - Busca coincidencias sem√°nticas entre lo que siente/menciona el usuario y lo que ofrece el grupo.
        - Considera beneficios indirectos (ej: un grupo de meditaci√≥n puede ayudar aunque el usuario hable de estr√©s laboral).
        - Elige el m√°s cercano si no hay exacto.

        IMPORTANTE: FORMATO DE RESPUESTA (sin markdown, sin corchetes, sin asteriscos) y separa cada secci√≥n con un salto de l√≠nea:
        Mensaje: [texto c√°lido de 2-3 l√≠neas explicando la conexi√≥n espec√≠fica entre lo que siente el usuario y c√≥mo este grupo puede ayudarle, usando emojis de bienestar]
        T√≠tulo: [nombre del grupo]
        URL: [url del grupo]

        Lista de grupos disponibles:
        ${JSON.stringify(gruposDisponibles, null, 2)}

        Historial de conversaci√≥n:
        ${historialTexto}`;


    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            max_tokens: 300,
            temperature: 0.3,
            messages: [
                {
                    role: "system",
                    content: "Eres Aura Calmness, un psic√≥logo especializado en mindfulness. Respondes de forma breve, emp√°tica y c√°lida. SIEMPRE analiza si hay un grupo adecuado antes de decir que no tienes ninguno."
                },
                {
                    role: "user",
                    content: prompt
                }
            ]
        });

        const mensaje = completion.choices[0].message.content.trim();
        return mensaje;
        
    } catch (err) {
        console.error("‚ùå Error generando mensaje de Aura:", err);
        return "üåø Disculpa, en este momento tengo dificultades t√©cnicas. Por favor intenta de nuevo en un momento. Estoy aqu√≠ para apoyarte. ‚ú®";
    }
}


async function generarMensajePreparacionMeditacion(usuarioMensaje) {
    const prompt = `
        Eres Aura, una gu√≠a de mindfulness. El usuario ha aceptado hacer una pr√°ctica de respiraci√≥n guiada.
        De acuerdo con la intencion del usuario, que ha expresado su inter√©s en una meditaci√≥n guiada, y con base en el mensaje que te envi√≥, crea un mensaje c√°lido y cercano para introducir la meditaci√≥n.
        Con base en su mensaje:
        "${usuarioMensaje}"

        Genera una breve frase (una o dos oraciones) en tono c√°lido y emp√°tico para introducir el env√≠o de un audio de meditaci√≥n. No digas literalmente que vas a preparar el audio, sino expresa entusiasmo y cercan√≠a, conectando con lo que el usuario dijo. No repitas el mensaje del usuario.

        Ejemplo de tono: "Qu√© bonito que te animes a probarlo. Prepara un espacio tranquilo, ahora te acompa√±o en una breve pr√°ctica üåø"
        `;

    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            temperature: 0.7,
            max_tokens: 60,
            messages: [
                { role: "system", content: "Eres Aura, una gu√≠a de mindfulness emp√°tica y cercana." },
                { role: "user", content: prompt }
            ]
        });

        return completion.choices[0].message.content.trim();
    } catch (err) {
        console.error("‚ùå Error generando mensaje de introducci√≥n a meditaci√≥n:", err);
        return "üåø Me alegra que quieras intentarlo. Voy a acompa√±arte con una meditaci√≥n especial ahora.";
    }
}

async function generarObservacionFinal(historial) {
    const historialTexto = historial
        .map((r, i) => `${i + 1}. Usuario: ${r.respuesta}\n   Aura: ${r.pregunta}`)
        .join("\n\n");

    const prompt = `
                Eres un analizador especializado en conversaciones de bienestar mental.

                Tu funci√≥n es evaluar esta conversaci√≥n para determinar el nivel de apoyo que necesita la persona.

                Analiza espec√≠ficamente:
                - Indicadores de crisis o riesgo emocional
                - Patrones de pensamiento preocupantes
                - Nivel de funcionalidad en la vida diaria
                - Capacidad de afrontamiento actual
                - Necesidad de intervenci√≥n profesional

                Conversaci√≥n:
                ${historialTexto}

               Genera un an√°lisis objetivo de m√°ximo 50 palabras indicando:
                    1. Estado emocional general
                    2. Nivel de riesgo (bajo/medio/alto)
                    3. Justificaci√≥n breve
                    4. Recomendaci√≥n de apoyo profesional (s√≠/no)
                `;

    const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        max_tokens: 200,
        temperature: 0.6,
        messages: [
            { role: "system", content: "Eres un analizador especializado en conversaciones de bienestar mental." },
            { role: "user", content: prompt }
        ]
    });

    const respuesta = completion.choices[0].message.content.trim();

    // Extraer si recomienda apoyo profesional
    const necesitaApoyo = respuesta.toLowerCase().includes("recomendaci√≥n de apoyo profesional: s√≠");

    // Extraer solo la justificaci√≥n (punto 4)
    const matchJustificacion = respuesta.match(/4\.\s*Justificaci√≥n breve:\s*(.+)/i);
    const justificacion = matchJustificacion ? matchJustificacion[1].trim() : respuesta;

    return {
        observacion: justificacion,
        necesitaApoyoProfesional: necesitaApoyo,
        textoCompleto: respuesta // opcional para guardar si deseas el an√°lisis completo
    };
}

async function registrarNombreBD(historial) {
    const historialTexto = historial
        .map((r, i) => `${i + 1}. Usuario: ${r.respuesta}\n   Aura: ${r.pregunta}`)
        .join("\n\n");

    const prompt = `
                A continuaci√≥n se presenta un historial de conversaci√≥n entre un asistente y un usuario.
                Tu tarea es extraer √∫nicamente el nombre del usuario, si lo menciona en alguna parte del di√°logo.
                Devuelve solo el nombre propio, sin explicaciones, saludos ni ning√∫n otro texto.
                Si hay m√∫ltiples nombres, elige el que el usuario usa para referirse a s√≠ mismo (por ejemplo: ‚ÄúMe llamo Carla‚Äù).
                Si no se menciona ning√∫n nombre, responde √∫nicamente con: NOMBRE NO ENCONTRADO.

                Conversaci√≥n:
                ${historialTexto}

                `;

    const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        max_tokens: 50,
        temperature: 0.2,
        messages: [
            { role: "system", content: "Eres un modelo especializado en analizar historiales de conversaci√≥n entre un asistente virtual y un usuario con el objetivo unicamente de obtener el nombre del usuario." },
            { role: "user", content: prompt }
        ]
    });

    return completion.choices[0].message.content.trim();

}

async function detectarIntencionMeditacion(ultimaRespuesta, ultimaPregunta) {

    const prompt = `
                    A continuaci√≥n se muestra la ultima respuesta registrada entre un usuario y un asistente de mindfulness.
                    Tu tarea es detectar si en alg√∫n punto el usuario ha **pedido expl√≠citamente** o **aceptado hacer** una meditaci√≥n guiada (en formato de audio). Esto incluye frases como: "quiero meditar", "pon el audio", "quiero escuchar la meditaci√≥n", etc.
                    Ten en cuenta que aplica para toda petici√≥n de que envie un audio, frases como "quiero un audio", "quiero escuchar un audio", "quiero una meditaci√≥n", "quiero hacer una meditaci√≥n", "quiero probar la meditaci√≥n", "quiero intentar la meditaci√≥n", "me gustar√≠a hacer una meditaci√≥n", etc. son todas indicativas de que el usuario quiere hacer una meditaci√≥n guiada.

                    REGLAS:
                    - Si el usuario muestra intenci√≥n clara de hacer o escuchar una meditaci√≥n, responde solo con: PEDIR_MEDITACION
                    - Si no hay ninguna se√±al clara de intenci√≥n, responde solo con: NO_ENCONTRADO
                    - No des ninguna explicaci√≥n adicional.

                    Ultima respuesta del sistema:
                    ${ultimaPregunta}

                   Ultima respuesta del usuario de la conversaci√≥n:
                    ${ultimaRespuesta}
                    `;

    const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        max_tokens: 10,
        temperature: 0,
        messages: [
            { role: "system", content: "Eres un modelo que analiza conversaciones para detectar si el usuario quiere realizar una meditaci√≥n guiada o escuchar un audio de meditaci√≥n." },
            { role: "user", content: prompt }
        ]
    });

    return completion.choices[0].message.content.trim();
}



function decidirMensajeFinal(necesitaApoyo) {
    if (necesitaApoyo) {
        return `Gracias por compartir este espacio conmigo. Con base en lo que hemos hablado, creo que podr√≠a ser muy valioso que consideres acompa√±amiento profesional adem√°s del grupo. \nSi lo deseas, tambi√©n puedes unirte a nuestro grupo de WhatsApp para seguir en contacto üí¨‚ú®`;
    }

    return `Ha sido un gusto acompa√±arte en esta sesi√≥n. Si quieres seguir explorando el mindfulness en comunidad, puedes unirte a nuestro grupo de WhatsApp üí¨‚ú®`;
}

async function generarMensajeConsentimientoAura(tipoRespuesta) {
  const sistema = `Eres Aura Calmness, un psic√≥logo especializado en Mindfulness. Tu forma de hablar es c√°lida, emp√°tica, profesional y cercana. Usas un lenguaje claro y accesible, adornado ocasionalmente con emojis relacionados con calma y bienestar (üçÉ, üå¨Ô∏è, ‚ú®, üòä, üôè). Est√°s en una sesi√≥n profesional de atenci√≥n a trav√©s de chat en maximo 3 lineas.`;

  const instrucciones = {
    SI: `El usuario ha aceptado el tratamiento de datos personales. Agrad√©cele de manera c√°lida, profesional y humana, no dejes preguntas abiertas, no digas que estas para el usuario, simplemente se claro y agradece su confianza.`,

    NO: `El usuario ha rechazado el tratamiento de datos personales. Expl√≠cale con respeto y amabilidad que no puedes continuar sin su consentimiento. An√≠male a reconsiderar si se siente c√≥modo y lo indique en el pr√≥ximo mensaje, pero sin presionarlo. Transmite contenci√≥n, cuidado y l√≠mites profesionales.`,

    INVALIDO: `El usuario ha respondido de forma ambigua o no clara respecto al tratamiento de datos personales. P√≠dele amablemente que confirme si acepta o no, usando una pregunta cordial y clara. Ofrece contexto de por qu√© es necesario su consentimiento, y mant√©n un tono cercano, tranquilo y profesional.`
  };

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      temperature: 0.5,
      messages: [
        { role: "system", content: sistema },
        { role: "user", content: instrucciones[tipoRespuesta] }
      ]
    });

    return completion.choices[0].message.content.trim();
  } catch (error) {
    console.error("‚ùå Error al generar mensaje con Aura Calmness:", error);

    // Fallbacks por si GPT falla
    if (tipoRespuesta === "SI") {
      return "Gracias por tu confianza üçÉ. Podemos continuar con tranquilidad, cuidando siempre tu bienestar.";
    } else if (tipoRespuesta === "NO") {
      return "Entiendo y respeto tu decisi√≥n üôè. No podr√© continuar sin tu consentimiento, pero si cambias de opini√≥n estar√© aqu√≠ para acompa√±arte.";
    } else {
      return "¬øPodr√≠as confirmarme si est√°s de acuerdo con el tratamiento de tus datos personales? Es importante para poder continuar con esta sesi√≥n üåø.";
    }
  }
}


module.exports = { generarObservacionFinal, 
    decidirMensajeFinal, 
    evaluarInteresRespiracion, 
    generarMensajePreparacionMeditacion, 
    registrarNombreBD, 
    detectarIntencionMeditacion, 
    extraerInformacionUsuario,
    detectarInteresComunidad,
    recomendarGrupo,
    evaluarConsentimientoDatos,
    generarMensajeConsentimientoAura
};
